name: Continuous Integration and Release for Windows Export
on: 
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - id: find_yyp
        name: Find the yyp file
        run: |
          $yyp = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter *.yyp
          Write-Output "YYP file found at: $yyp"
          "yyp-path=$yyp" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
      - name: use Igor Setup
        uses: bscotch/igor-setup@v1
        id: igor
        with:
          target-yyp: ${{ steps.find_yyp.outputs.yyp-path }}
          access-key: ${{ secrets.ACCESS_KEY }}
      
      - name: use Igor build
        uses: bscotch/igor-build@v1
        id: build
        with:
          yyp-path: ${{ steps.find_yyp.outputs.yyp-path }}
          user-dir: ${{ steps.igor.outputs.user-dir }}
      
      - name: Extract version from .exe
        id: extract_version
        run: |
          $exePath = Get-ChildItem -Path "${{ steps.build.outputs.out-dir }}" -Filter *.exe | Select-Object -ExpandProperty FullName
          if (-not $exePath) { throw "No executable found in build output" }
          
          $versionInfo = (Get-Item $exePath).VersionInfo
          $version = $versionInfo.ProductVersion
          
          if (-not $version) { throw "No version information found in executable" }
          
          Write-Output "Extracted version: $version"
          echo "version=$version" >> $GITHUB_ENV

      - name: upload-build
        uses: actions/upload-artifact@v4
        with:
          name: igor-build-windows
          path: ${{ steps.build.outputs.out-dir }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: igor-build-windows
          path: build

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: build/*
          token: ${{ secrets.TOKEN }}
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
