name: Continuous Integration and Release for Windows Export
on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_call:


jobs:
  build:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - id: find_yyp
        name: Find the yyp file
        run: |
          $yyp = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter *.yyp
          Write-Output "YYP file found at: $yyp"
          "yyp-path=$yyp" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
      - name: use Igor Setup
        uses: bscotch/igor-setup@v1
        id: igor
        with:
          target-yyp: ${{ steps.find_yyp.outputs.yyp-path }}
          access-key: ${{ secrets.ACCESS_KEY }}
      
      - name: use Igor build
        uses: bscotch/igor-build@v1
        id: build
        with:
          yyp-path: ${{ steps.find_yyp.outputs.yyp-path }}
          user-dir: ${{ steps.igor.outputs.user-dir }}
      
      # 🔍 Vérifier quels fichiers ont été générés (debug)
      - name: Debug Build Output
        run: |
          Write-Output "Listing contents of build output directory:"
          Get-ChildItem -Path "${{ steps.build.outputs.out-dir }}" -Recurse
      
      # 📦 Trouver et extraire les fichiers ZIP
      - name: Extract ZIP Files
        id: extract_zip
        run: |
          $zipFiles = Get-ChildItem -Path "${{ steps.build.outputs.out-dir }}" -Filter *.zip | Select-Object -ExpandProperty FullName
          if (-not $zipFiles) { throw "No ZIP files found in build output" }
          
          foreach ($zip in $zipFiles) {
            Write-Output "Extracting: $zip"
            Expand-Archive -Path $zip -DestinationPath "${{ steps.build.outputs.out-dir }}/extracted" -Force
          }

      # 🔍 Vérifier le contenu après extraction
      - name: Debug Extracted Files
        run: |
          Write-Output "Listing contents of extracted directory:"
          Get-ChildItem -Path "${{ steps.build.outputs.out-dir }}/extracted" -Recurse

      # 🎯 Trouver l'exécutable après extraction
      - name: Find Executable
        id: find_exe
        run: |
          $exePath = Get-ChildItem -Path "D:\a\Test_igor\Test_igor\out\extracted" -Recurse -Filter *.exe | Select-Object -First 1 -ExpandProperty FullName
          if (-not $exePath) { 
            throw "No executable found after extraction" 
          }
          Write-Output "Executable found: $exePath"
          echo "exe-path=$exePath" | Out-File -FilePath $env:GITHUB_ENV -Append


      # 🔢 Extraire la version depuis l'exécutable
      - name: Extract Version from Executable
        id: extract_version
        run: |
          if (-not "${{ env.exe-path }}") { 
            throw "Executable path is empty. Check the previous step." 
          }
          $versionInfo = (Get-Item "${{ env.exe-path }}").VersionInfo
          $version = $versionInfo.ProductVersion
          if (-not $version) { 
            throw "No version information found in executable" 
          }
          Write-Output "Extracted version: $version"
          echo $version | Out-File -FilePath "${{ steps.build.outputs.out-dir }}/version.txt" -Encoding utf8

      # 📤 Ajouter la version aux artefacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: igor-build-windows
          path: |
            ${{ steps.build.outputs.out-dir }}
            ${{ steps.build.outputs.out-dir }}/version.txt
          retention-days: 1


  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 📥 Télécharger les artefacts
      - uses: actions/download-artifact@v4
        with:
          name: igor-build-windows
          path: build
  
      # 🔢 Récupérer la version
      - name: Read Version
        id: read_version
        run: echo "version=$(cat build/version.txt)" >> $GITHUB_ENV
        
      - name: 🔍 Vérifier les fichiers téléchargés
        run: ls -R build

      # 🔄 Renommer le fichier ZIP avec la version
      - name: Rename ZIP file
        run: mv build/Test_igor.zip build/release-${{ env.version }}.zip
  
      # 🚀 Créer la release avec le fichier renommé
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: build/release-${{ env.version }}.zip
          token: ${{ secrets.TOKEN }}
          tag_name: dev-release
          name: v${{ env.version }}
