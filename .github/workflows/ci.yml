name: Build Clatterbind macOS

on:
  workflow_dispatch:  # lancer manuellement
  push:
    branches: [ main ]

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      # 1️⃣ Checkout du repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Définir les inputs pour Igor
      - name: Set inputs
        run: |
          echo "runtime=YYC" >> $GITHUB_ENV
          echo "platform=macos" >> $GITHUB_ENV

      # 3️⃣ Setup Igor pour macOS uniquement
      - name: Igor setup
        uses: bscotch/igor-setup@develop
        id: igor
        with:
          access-key: ${{ secrets.ACCESS_KEY }}
          target-yyp: ${{ github.workspace }}/CLATTERBIND.yyp
          local-settings-override-file: ${{ github.workspace }}/local_settings.json
          runtime-version: ${{ env.runtime }}
          cache: true
          modules: macos

      # 4️⃣ Build avec Igor → génère Mac.zip
      - name: Igor build
        uses: bscotch/igor-build@main
        id: build
        timeout-minutes: 30
        with:
          yyp-path: ${{ github.workspace }}/CLATTERBIND.yyp
          user-dir: ${{ steps.igor.outputs.user-dir }}
          platform: macos

      # 5️⃣ Décompression du projet Xcode
      - name: Unzip Xcode project
        run: unzip ${{ steps.build.outputs.out-dir }}/Mac.zip -d mac_export

      # 6️⃣ Compiler .app non signé
      - name: Build .app (no code signing)
        run: |
          cd mac_export
          xcodebuild \
            -project *.xcodeproj \
            -configuration Release \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      # 7️⃣ Déplacer .app dans output/
      - name: Prepare output folder
        run: |
          mkdir -p output
          cp -R mac_export/build/Release/*.app output/

      # 8️⃣ Upload artifact .app
      - name: Upload macOS .app
        uses: actions/upload-artifact@v4
        with:
          name: Clatterbind-macOS
          path: output/*.app
          retention-days: 1
